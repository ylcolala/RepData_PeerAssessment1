y=data[,2]
data<-read.table("./data/ex1/ex1data1.txt", seq(","))
dim(data)
data<-read.table("./data/ex1/ex1data1.txt", sep = ",")
dim(data)
X<-data[,1]
y<-data[,2]
length(y)
plot(X,y)
?plot
plot(x,y,xlab = "Population of City in 10,000s", ylab = "Profit in $10,000s")
plot(X,y,xlab = "Population of City in 10,000s", ylab = "Profit in $10,000s")
X<-cbind(x1=rep(1,length(X)),X)
head(X)
str(X)
View(X)
theta<-rep(0,2)
theta
iterantion=1500
alpha = 0.01
a<-matrix(1ï¼š4ï¼Œ2ï¼Œ2)
a<-matrix(1:4,2,2)
b<-matrix(1:2,2,1)
a-b
a
b
a-b
c<-b
c-b
sum(b)
b
m<-length(y)
source('~/.active-rstudio-document')
computeCost(X,y,theta)
X
theta
t(theta)
t(theta)%*%X
computeCost(X,y,theta)
source('~/.active-rstudio-document')
computeCost(X,y,theta)
theta%*%X
dim(theta)
dim(theta)
theta<-matrix(rep(0,2),2,1)
theta
source('~/.active-rstudio-document')
computeCost(X,y,theta)
theta
x
dim(thet)
dim(theta)
dim(X)
t(theta)%*%t(X)
source('~/.active-rstudio-document')
computeCost(X,y,theta)
aa<-computeCost(X,y,theta)
aa
theta
X
dim(theta)
dim(x)
dim(X)
dim(y)
length(y)
sum(theta)
theta
source('~/.active-rstudio-document')
theta=gradientDescent(X,y,theta,alpha,iterations)
iteration
iterations
theta=gradientDescent(X,y,theta,alpha,iterantions)
iterations<-1500
theta=gradientDescent(X,y,theta,alpha,iterations)
theta
theta1<-theta-(alpha/m)*rowSums(t((t(theta)%*%t(X)-y)%*%X))
theta1<-(alpha/m)*rowSums(t((t(theta)%*%t(X)-y)%*%X))
y<-matrix(y,1,97)
theta=gradientDescent(X,y,theta,alpha,iterations)
X
class(X)
theta1<-(alpha/m)*rowSums(t((t(theta)%*%t(X)-y)%*%X))
t(theta)%*%t(X)-y
t(theta)
theta
theta<-matrix(rep(0,2),2,1)
t(theta)%*%t(X)-y
aa<=t(theta)%*%t(X)-y
aa<-t(theta)%*%t(X)-y
dim(aa)
head(aa)
bb<-aa%*%X
dim(bb)
bb
bb<-aa%*%t(X)
dim(aa)
dim(X)
dim(theta)
source('~/.active-rstudio-document')
theta=gradientDescent(X,y,theta,alpha,iterations)
theta
theta<-matrix(rep(0,2),2,1)
t((t(theta)%*%t(X)-y)%*%X[,1])
dim(y)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
theta=gradientDescent(X,y,theta,alpha,iterations)
theta
theta<-matrix(rep(0,2),2,1)
theta[1,1]-(alpha/m)*((t(theta)%*%t(X)-y)%*%X[,1])
theta[2,1]-(alpha/m)*((t(theta)%*%t(X)-y)%*%X[,2])
dim(theta)
computeCost(X,y,theta)
aa<-computeCost(X,y,theta)
aa
theta=gradientDescent(X,y,theta,alpha,iterations)
theta
theta<-matrix(rep(0,2),2,1)
source('~/.active-rstudio-document')
theta=gradientDescent(X,y,theta,alpha,iterations)
theta
J_history
source('~/.active-rstudio-document')
J_history<-gradientDescent(X,y,theta,alpha,iterations)
source('~/.active-rstudio-document')
history<-gradientDescent(X,y,theta,alpha,iterations)
theta
theta<-matrix(rep(0,2),2,1)
history<-gradientDescent(X,y,theta,alpha,iterations)
dim(history)
source('~/.active-rstudio-document')
history<-gradientDescent(X,y,theta,alpha,iterations)
history
source('~/.active-rstudio-document')
theta<-gradientDescent(X,y,theta,alpha,iterations)
source('~/.active-rstudio-document')
theta
plot(X,X%*%theta)
plot(X[,2],X%*%theta)
predict1<-[1,3.5]*theta
predict1<-(1,3.5)*theta
predict1<-c(1,3.5)*theta
predict1
predict<-matrix(1,3.5)%*%theta
predict<-matrix(c(1:3.5),1,2)%*%theta
dim(theta)
predict<-matrix(c(1,3.5),1,2)%*%theta
predict
theta-(alpha/m)*((t(theta)%*%t(X)-y)%*%X)
source('~/.active-rstudio-document')
source('~/linear_regression.R')
?scale
swirl()
library(swirl)
swirl()
?Devices
with(dataset, plot())
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
de.cur()
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed),max(car$dist),"SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income|region,state, c(4,1))
xyplot(Life.Exp~Income|region,data=state, layout=c(4,1))
xyplot(Life.Exp~Income|region,data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
3.14^3.14
30:40
sin(1:2)
?sin
swirl()
head(airquality)
range(airquality$Ozone,na.rm = TRUE)
max(airquality$Ozone)
max(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone,Month, data=airquality)
boxplot(Ozone~Month, data=airquality)
boxplot(Ozone~Month, data=airquality, xlab="Month", ylab="Ozone (ppb)", col.axis = "blue", col.lab="red" )
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New York City")
par()
length(par())
names(par())
names(max())
names(plot())
par()$pin
par("fg")
par("pch")
par("lty")
with(airquality,plot(wind,Ozone,type="n"))
with(airquality,plot(Wind,Ozone,type="n"))
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
table(airquality$Month)
may<-subset(airquality,Month==5)
points(may$Wind,may$Ozone,pch="3",col="blue")
points(may$Wind,may$Ozone,pch=17,col="blue")
?pch
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,pch=8,col=red)
points(notmay$Wind,notmay$Ozone,pch=8,col="red")
legend("topright", c(17,8), c("blue","red"), ("May","Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"), legend=("May","Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"), legend=("May","Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
lines(v==median(airquality$Wind), lty=2,lwd=2)
lines(v=median(airquality$Wind), lty=2,lwd=2)
lines(h=median(airquality$Wind), lty=2,lwd=2)
abline(v=median(airquality$Wind), lty=2,lwd=2)
par(mfrow=c(2,1))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow=c(1,2), mar=c(4,4,2,1), oma=c(0,0,2,0) )
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R,main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
title(main="aa")
mtext("Ozone and Weather in New York City", outer = TRUE).
mtext("Ozone and Weather in New York City", outer = TRUE)
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month),airquality,layout=c(5,1))
xyplot(Ozone~Wind|Month,airquality,layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames<-names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
p[["x.limits"]]
table(f)
table(f)
xyplot(y ~ x | f, layout = c(2, 1))
v1
v1
v2
myedit("plot1.R")
myedit("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamond$color, diamond$cut)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source("myLabels.R", local=TRUE)
source(pathtofile="myLabels.R", local=TRUE)
source(pathfile="myLabels.R", local=TRUE)
source(pathFile="myLabels.R", local=TRUE)
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat|color*cut,diamonds,strip = FALSE, pch=20, xlab=myxlab,ylab=mylab,main=mymain)
xyplot(price~carat|color*cut,diamonds,strip = FALSE, pch=20, xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,diamonds, pch=20, xlab=myxlab,ylab=myylab,main=mymain)
swirl()
library(swirl)
swirl()
qplot(displ, hwy, data=mpg, geom = c("point","smooth"), facets = .~drv, "loess")
qplot(displ, hwy, data=mpg, geom = c("point","smooth"), facets = .~drv, method="loess")
?losess
?loess
ggplot(mpg, aes(displ,hwy))
ggplot(data=mpg, aes(displ,hwy))
g<-ggplot(data=mpg, aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
lm<-g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
ggtitle("Swirl Rules!")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(aes(col=drv), size=4, alpha=1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g<-ggplot(testdat, aes(x=myx, y=myy))+geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line() +xlim
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line() + ylim(-3,3)
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line() + ylim(c(-3,3)
)
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line() + ylim(c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy, ylim=c(-3,3))) + geom_line()
info()
g <- ggplot(testdat, aes(x = myx, y = myy))
g <- g+ geom_line()
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(c(-3,3))
g+geom_line()+coord_cartesian(ylim = c(-3,3)
)
)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g<-ggplot(mpg,aes(x=displ, y=hwy, color=factor(year)))
g<-ggplot(mpg,aes(x=displ, y=hwy, color=factor(year)))
g
g+geom_point()
g+geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() +
| facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
| Mileage",title="Swirl Rules!")
g + geom_point() +
| facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
| Mileage",title="Swirl Rules!")
g + geom_point() +
| facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway  Mileage",title="Swirl Rules!")
g + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway  Mileage",title="Swirl Rules!")
quit()
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator ==1,]
testSpam = spam[trainIndicator==0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve~trainSpam$type)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
?kernlab
??kernlab
plot(log10(trainSpam[,1:4]+1))
plot(trainSpam[,1:4]+1)
plot(trainSpam[,1:4])
plot(log15(trainSpam[,1:4]+1))
plot(log(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
setwd("C:/RepData")
library(dplyr)
activity<-read.csv("activity.csv")
activity$date<-as.Date(activity$date)
str(activity)
aa<-group_by(activity, interval)
head(aa)
str(aa)
activity$interval<-as.numerics(activity$interval)
activity$interval<-as.numeric(activity$interval)
str(activity)
aa<-group_by(activity, interval)
head(aa,5)
activity$interval<-as.(activity$interval)
sample(5,5)
sample(5,10,replace=TREU)
sample(5,10,replace=TRUE)
aa<-sample(5,10,replace=TRUE)
bb<-sample(3,10,replace=TRUE)
cc<-cbind(aa,bb)
head(cc)
group_by(cc, aa)
str(cc)
attributes(cc)
cc<-data.frame(cc)
group_by(cc,aa)
cc
group_by(bb)
group_by(cc,bb)
library(nycflights13)
datas()
aa<-group_by(data,V1)
head(aa,5)
setwd("C:/mydata/clusteringEx_data/data")
library(dplyr)
library(ggplot2)
NEI<-readRDS("summarySCC_PM25.rds")
SCC<-readRDS("Source_classification_Code.rds")
subNEI<-filter(NEI, fips == "24510")
scc.motor<-SCC[grepl("motor",SCC$Short.Name, ignore.case = TRUE),]
NEI.motor<-subNEI[subNEI$SCC %in% unique(scc.motor$SCC),]
grouped<-group_by(NEI.motor,year)
ls()
ls(data)
library(datasets)
data("diamonds")
View("diamonds")
View(diamonds)
View(group_by(diamonds,price))
str(diamonds)
str(activity)
View(group_by(activity, interval))
View(diamonds)
View(group_by(diamonds,color))
aa<-group_by(activity, interval)
bb<-summarize(aa, n=count())
bb<-summarize(aa, count=n())
View(bb)
str(bb)
str(aa)
step_interval<-group_by(activity, interval)
max_step_interval<-arrange(step_interval, steps)
View(max_step_interval)
max_step_interval<-arrange(step_interval, desc(steps))
max_step_interval<-summarize(max_step_interval,max_date=first(date))
View(max_step_interval)
str(mean_step_interval)
step_interval<-group_by(activity, interval)
mean_step_interval<-summarize(step_interval, means=mean(steps))
str(mean_step_interval)
mean_step_interval<-summarize(step_interval, means=mean(steps,na.rm = TRUE))
str(mean_step_interval)
max_interval<-mean_step_interval[max(means),]
View(mean_step_interval)
max_interval<-mean_step_interval[max(mean_step_interval$means),]
head(max_interval)
complete.cases(activity)
sum(complete.cases(activity))
sum(!complete.cases(activity))
sum(is.na(activity$steps)
)
row(activity)
col(activity)
dim(activity)
dim(activity)[1]
aa<-split(activity, activity$interval)
View(aa)
str(aa)
class(aa)
lapply(aa, )
str(mean_step_interval)
activity<-merge(activity, mean_step_interval,by=interval)
activity<-merge(activity, mean_step_interval,by="interval")
View(activity)
activity<-activity[if(is.na(activity$steps))activity$steps=activity$means,]
View(activity)
activity<-apply(activity,  if(is.na(activity$steps))activity$steps=activity$means)
activity<-apply(activity,  function(){if(is.na(activity$steps))activity$steps=activity$means})
str(activity)
activity<-apply(activity,  function(x){if(is.na(x[2]))x[2]=x[4]})
activity<-apply(activity, 2 ,function(x){if(is.na(x))x=activity$means})
activity[is.na(activity$steps),]$steps<-activity[is.na(activity$steps),]$means
activity[which(is.na(activity$steps)),]$steps<-activity[which(is.na(activity$steps)),]$means
activity[is.na(activity$steps),]
activity[,is.na(activity$steps)]
is.na(activity$steps)
head(activity)
activity[,1]
str(activity)
activity<-read.csv("activity.csv")
setwd("C:/RepData")
activity<-read.csv("activity.csv")
activity[is.na(activity$steps),]
activity[which(is.na(activity$steps)),]$steps<-activity[which(is.na(activity$steps)),]$means
activity[is.na(activity$steps)),]$steps<-activity[is.na(activity$steps),]$means
activity[is.na(activity$steps),]$steps<-activity[is.na(activity$steps),]$means
View(activity)
activity<-read.csv("activity.csv")
step_interval<-group_by(activity, interval)
mean_step_interval<-summarize(step_interval, means=mean(steps,na.rm = TRUE))
activity<-merge(activity, mean_step_interval,by=interval)
activity<-merge(activity, mean_step_interval,by="interval")
activity[is.na(activity$steps),]$steps<-activity[is.na(activity$steps),]$means
View(activity)
weakdays()
str(activity)
weekdays(activity$date)
weekdays(as.date(activity$date)
)
weekdays(as.Date(activity$date)
)
